#!/bin/bash

# Sometimes when glideins get preempted too quickly, a glide_* workdir
# can be left behind. The script checks for such leftovers, and tries
# to clean them up.


GLIDEIN_CONFIG="$1"
export GLIDEIN_CONFIG

function get_glidein_config_value {
    # extracts a config attribute value from
    # $1 is the attribute key
    CF=$GLIDEIN_CONFIG
    if [ "$GLIDEIN_CONFIG" = "NONE" ]; then
        CF="$PWD/glidein_config"
    fi
    KEY="$1"
    VALUE=`(grep "^$KEY " "$CF" | tail -n 1 | sed "s/^$KEY //") 2>/dev/null`
    echo "$VALUE"
}

# space separated
TARGET_RESOURCES="CHTC-Spark-CE1 ISI"
MAX_CLEANUPS=10
CLEAN_COUNT=0

GLIDEIN_ResourceName=$(get_glidein_config_value GLIDEIN_ResourceName)

pushd ..

echo "Cleanup start:" $(date +'%s')

echo "Cleanup script disabled. Doing nothing."

# echo "Checking for leftover glide_* directories in $PWD"

# # finding the candidates
# for DIR in $(find . -maxdepth 1 -name glide_\* -user $USER -mtime +6); do

#     DIR=$(echo "$DIR" | sed -e 's;^[/.]*;;')
#     SIZE=$(du -s --si "$DIR" | awk '{print $1;}')
#     LASTMOD=$(stat --format='%y' "$DIR")

#     # double check that this is not an active glidein
#     if [[ $(find "$DIR" -maxdepth 1 -name osgvo.test-results.1h.panopticon -mmin -120 -print) ]]; then
#         continue
#     fi
    
#     echo "  Cleanup candidate: $DIR   ($SIZE, $LASTMOD)"

#     # for now, only do the cleanup on select sites
#     if [[ " $TARGET_RESOURCES " =~ " $GLIDEIN_ResourceName " ]]; then
#         if [[ $CLEAN_COUNT -lt $MAX_CLEANUPS ]]; then
#             echo "    Cleanup removing $DIR"
#             rm -rf "$DIR"
#             CLEAN_COUNT=$(($CLEAN_COUNT + 1))
#         fi
#     fi

# done

popd

echo "Cleanup end:" $(date +'%s')
